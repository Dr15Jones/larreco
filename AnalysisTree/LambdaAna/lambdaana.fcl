#include "job/services.fcl"
#include "job/simulationservices.fcl"
#include "job/lambdaanamodules.fcl"

process_name: LambdaAna

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "lambdaana_hist.root" }
  Timing:       {}
  user:         @local::argoneut_services 
}

# services from LArSoft - see definitions for configurations in 
# job/geometry.fcl
services.user.Geometry: @local::argoneut_geo 


#Start each new event with an empty event.
source:
{
  module_type: RootInput 
  dirName:     "."
  fileNames:    ["genie_gen_reco.root"]
  maxEvents:  10       # Number of events to create
}

outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "lambdaana.root" #default file name, can override from command line with -o or --output
 }
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.

physics:
{

# producers:{}

# filters:{}

 analyzers:
{
lambdaana:  @local::argoneut_lambdaana 
}

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers belo 
 #simulate: [ generator, largeant ] 
 lambdaana: [lambdaana]
 
 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 #trigger_paths: [simulate] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [lambdaana, stream1]  
}

