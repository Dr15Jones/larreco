BEGIN_PROLOG

standard_houghbasealg:
{
  MaxLines:                 20   # The maximum number of Hough lines to look for, 20 had been working!
  MinHits:                  5
  SaveAccumulator:          0
  NumAngleCells:            20000 # The number of angle cells to create for the Hough transform,
  RhoResolutionFactor:      5    # Was set to 5
  MaxDistance:              1.0  # 0.1 was working (okay, not really, larger is probably better,
  MaxSlope:                 80.0 # 80 was working fine previously
  RhoZeroOutRange:          0
  ThetaZeroOutRange:        0
  HitsPerCluster:           1
  MissedHits:               1    # Was set to 0
  DoFuzzyRemnantMerge:      1    # Tell the algorithm to merge fuzzy cluster remnants into showers or tracks (0-off, 1-on)
  DoHoughLineMerge:         1    # Turns on Hough line merging (0-off, 1-on)
  HoughLineMergeAngle:      10   # The maximum angle between slopes of Hough lines to be merged,
  HoughLineMergeCutoff:     10   # The maximum distance between Hough line endpoints before they can be merged,
  DoShowerHoughLineMerge:     1  # Turns on parallel Hough line merging (0-off, 1-on)
  ShowerHoughLineMergeAngle: 90  # The maximum angle between slopes of Hough lines to be merged,
  ShowerHoughLineMergeCutoff: 10 # The maximum distance between Hough line endpoints before they can be merged,
  DoWideHoughLineMerge:     1    # Turns on parallel Hough line merging (0-off, 1-on)
  WideHoughLineMergeAngle: 30    # The maximum angle between slopes of Hough lines to be merged,
  WideHoughLineMergeCutoff: 10   # The maximum distance between Hough line endpoints before they can be merged,
  LineIsolationCut:         0.1  # The cut on the Hough lines isolation
  ChargeAsymmetryCut:       0.2  # Cut on the asymmetry from the average charge of the four hits from each line closest to each other
  SigmaChargeAsymmetryCut:  1.0  # Cut on the asymmetry from the average charge sigma of the four hits from each line closest to each other
  ShowerLikenessCut:        100  # Cut on shower likeness (the larger the more shower like, the smaller the less shower like)
}

standard_endpointalg:
{
  TimeBins:            256
  MaxCorners:          20
  Gsigma:              1.
  Window:              5
  Threshold:           0.1
  SaveVertexMap:       -1
}


standard_cornerfinderalg:
{
  RawDataModuleLabel:           "daq"
  CalDataModuleLabel:		"caldata"
  Conversion_threshold:		0
  Conversion_bins_per_input_x:	1
  Conversion_bins_per_input_y:	6
  Derivative_method: 		"Sobel" #Noble
  Derivative_neighborhood:	1 
  CornerScore_neighborhood:	1
  CornerScore_algorithm:	"Nobel" #Harris
  MaxSuppress_neighborhood:	3
  MaxSuppress_threshold:		1e5
  Integral_bin_threshold:       5
  Integral_fraction_threshold:  0.9


}

standard_dbscanalg:
{
  eps:    1.0
  epstwo: 1.5
  minPts: 2
  Method: 0   # 0 -- naive findNeighbor implemention                     
              # 1 -- findNeigbors with R*-tree                           
              # 2 -- DBScan from the paper with R*-tree                  
  Metric: 3   # Which RegionQuery distance metric to use.                
              # **ONLY APPLIES** if Method is 1 or 2.                    
              #                                                          
	      # 0 -- rectangle (no bad channels) **not implemented**     
	      # 1 -- Manhattan distance (only uses eps, no bad channels) 
              #                                  **not implemented**     
	      # 2 -- Eliptical (no bad channels) **not implemented**     
	      # 3 -- findNeighbors-alike: Elliptical and bad             
              #                           channel aware (not working)    
}

standard_fuzzyclusteralg:
{
  eps:             1.0
  epstwo:          1.5
  minPts:          2
  Method:          2   # 0 -- naive findNeighbor implemention                     
                       # 1 -- findNeigbors with R*-tree                           
                       # 2 -- Use fuzzy clustering                               
  Metric:          3   # Which RegionQuery distance metric to use.                
                       # **ONLY APPLIES** if Method is 1 or 2.                    
                       #                                                          
	               # 0 -- rectangle (no bad channels) **not implemented**     
	               # 1 -- Manhattan distance (only uses eps, no bad channels) 
                       #                                  **not implemented**     
	               # 2 -- Eliptical (no bad channels) **not implemented**     
	               # 3 -- findNeighbors-alike: Elliptical and bad             
                       #                           channel aware (not working)    
  Fuzzifier:      2    # The fuzzifier (m) needed for fuzzy clustering
  MaxClusters:    10   # The maximum number of clusters to try, needed for fuzzy clustering, was 5
  Iterations:     100  # The maximum number of iterations to try, needed for fuzzy clustering, was 10
  MergeCutoff:    100  # The maximum distance between clusters prior to merging,  
                       #needed for fuzzy clustering, 10 was what was used before

  HoughBaseAlg:    @local::standard_houghbasealg
  EndPointClusAlg: @local::standard_endpointalg
}

standard_dbscanalg_fast:        @local::standard_dbscanalg
standard_dbscanalg_fast.eps:    1.25
standard_dbscanalg_fast.epstwo: 1.75
standard_dbscanalg_fast.Method: 2

jp250L_dbscanalg:                  @local::standard_dbscanalg      
jp250L_fuzzyclusteralg:            @local::standard_fuzzyclusteralg
jp250L_houghbasealg:               @local::standard_houghbasealg   
jp250L_houghbasealg.MaxLines:      15
jp250L_houghbasealg.MinHits:       3
jp250L_houghbasealg.NumAngleCells: 5000
jp250L_houghbasealg.MaxDistance:   5.0
jp250L_endpointalg:                @local::standard_endpointalg

bo_dbscanalg:                   @local::standard_dbscanalg      
bo_fuzzyclusteralg:             @local::standard_fuzzyclusteralg
bo_houghbasealg:                @local::standard_houghbasealg   
bo_houghbasealg.MaxLines:       15
bo_houghbasealg.MinHits:        3
bo_houghbasealg.NumAngleCells:  5000
bo_houghbasealg.MaxDistance:    5.0
bo_endpointalg:                 @local::standard_endpointalg

argoneut_dbscanalg:                  @local::standard_dbscanalg       
argoneut_fuzzyclusteralg:            @local::standard_fuzzyclusteralg
argoneut_houghbasealg:               @local::standard_houghbasealg   
argoneut_houghbasealg.MaxLines:      15                              
argoneut_houghbasealg.MinHits:       3                               
argoneut_houghbasealg.NumAngleCells: 5000
argoneut_houghbasealg.MaxDistance:   5.0
argoneut_endpointalg:                @local::standard_endpointalg
argoneut_cornerfinderalg:		      @local::standard_cornerfinderalg



microboone_dbscanalg:                         @local::standard_dbscanalg_fast 
microboone_endpointalg:                       @local::standard_endpointalg    
microboone_houghbasealg:                      @local::standard_houghbasealg   
microboone_houghbasealg.MaxLines:             20
microboone_houghbasealg.MaxDistance:          1.0
microboone_houghbasealg.MinHits:              5
microboone_houghbasealg.NumAngleCells:        20000
microboone_houghbasealg.DoHoughLineMerge:     1
microboone_houghbasealg.HoughLineMergeAngle:  15
microboone_houghbasealg.HoughLineMergeCutoff: 5
microboone_fuzzyclusteralg:                   @local::standard_fuzzyclusteralg 
microboone_fuzzyclusteralg.HoughBaseAlg:      @local::microboone_houghbasealg 
microboone_cornerfinderalg:		      @local::standard_cornerfinderalg

lbne10kt_dbscanalg:    @local::standard_dbscanalg_fast
lbne10kt_houghbasealg: @local::standard_houghbasealg
lbne10kt_endpointalg:  @local::standard_endpointalg 

lbne35t_dbscanalg:    @local::standard_dbscanalg_fast
lbne35t_houghbasealg: @local::standard_houghbasealg
lbne35t_endpointalg:  @local::standard_endpointalg 

END_PROLOG
