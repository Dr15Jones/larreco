#include "job/services.fcl"
#include "job/simulationservices.fcl"
#include "job/largeantmodules.fcl"
#include "job/detsimmodules.fcl"
#include "job/t962geantmodules.fcl"


process_name: T962G4Ana

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "t962gana_hist.root" }
  Timing:       {}
  SimpleMemoryCheck:     { ignoreTotal: 1 } # default is one
  RandomNumberGenerator: {} #ART native random number generator
  user:         @local::argoneut_services
}



#source is now a root file
source:
{
  module_type: RootInput
  maxEvents:  -1      # Number of events to create
}

outputs:
{
 out1:
 {
   module_type: RootOutput
###default file name, can override from command line with -o or --output
   fileName:    "t962gana.root" 
 }
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.

physics:
{

 producers:
 {
//    generator: @local::argoneut_genie_hist_neutrino
   largeant:  @local::argoneut_largeant	       
   daq:       @local::argoneut_simwire 
 }
 
 analyzers:
 {
   t962gana:  @local::argoneut_t962geantana  
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 simulate: [ largeant, daq ] 
 t962ana: [ t962gana ]
 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [simulate] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [t962ana, stream1]  
}

