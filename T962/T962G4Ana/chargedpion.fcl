#include "job/services.fcl"
#include "job/pionana.fcl"



process_name: pionana

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "TESTChargedPion_pion_hist.root" }
  scheduler:    { wantTracer: true wantSummary: true }
  Timing:       {}
  RandomNumberGenerator: {} #ART native random number generator
  user: { }
}

# services from LArSoft - see definitions for configurations in 
services.user.Geometry:           @local::argoneut_geo 


#source is now a root file
source:
{
  module_type: RootInput
  #maxEvents:  10       # Number of events to create
}

outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "TESTChargedPion_pion_gen.root" #default file name, can override from command line with -o or --output
 }
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

# producers:{}

# filters:{}

 analyzers:{}

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 ana: [ chargedpion ] 

 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [ana, stream1]  
}

# define the list of LArSoft modules to run through the simulate path
physics.analyzers.chargedpion:    @local::argoneut_chargedpion  

