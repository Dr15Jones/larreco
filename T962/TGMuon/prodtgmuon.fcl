#include "job/services.fcl"
#include "job/simulationservices.fcl"
#include "job/tgmuon.fcl"
#include "job/largeantmodules.fcl"
#include "job/detsimmodules.fcl"

process_name: TGMuonGen

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "tgmuon_hist.root" }
  Timing:       {}
  RandomNumberGenerator: {} #ART native random number generator
  user: 
  { 
   Geometry:           @local::argoneut_geo 	       
   LArProperties:      @local::argoneut_properties	       
   LArFFT:             @local::argoneut_larfft  	       
   LArG4Parameters:    @local::argoneut_largeantparameters
   LArVoxelCalculator: @local::argoneut_larvoxelcalculator
  }
}


#Start each new event with an empty event.
source:
{
  module_type: EmptyEvent
  maxEvents:   30          # Number of events to create
  firstRun:    1           # Run number to use for this file
  firstEvent:  1           # number of first event in the file
}

outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "tgmuon_gen.root"
 }
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
   generator: @local::standard_tgmuon  
   largeant:  @local::argoneut_largeant	  
   daq:       @local::argoneut_simwire       
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 simulate: [ generator, largeant, daq ] 
 
 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [simulate] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1]  
}
