#include "job/evdservices.fcl"
#include "job/argoevdservices.fcl"

process_name: ArgoneutEVD

t962services:
{
 Geometry:                 @local::argoneut_geo 
 LArProperties:            @local::argoneut_properties
 DetectorProperties:       @local::argoneut_detproperties
 DatabaseUtil:             @local::argoneut_database   
 ColorDrawingOptions:      @local::argoneut_colordrawingopt
 SimulationDrawingOptions: @local::argoneut_simdrawingopt  
 RawDrawingOptions:        @local::argoneut_rawdrawingopt  
 RecoDrawingOptions:       @local::argoneut_recodrawingopt 
 AnalysisDrawingOptions:   @local::argoneut_analysisdrawingopt
 EvdLayoutOptions:         @local::argoneut_evdlayoutopt
 EventDisplay:             @local::argoneut_evd            
 ScanOptions:              @local::argoneut_scanopt
 LArG4Parameters:          @local::argoneut_largeantparameters
 LArVoxelCalculator:       @local::argoneut_larvoxelcalculator
 InfoTransfer:             @local::argoneut_infotransfer
 ArgoneutDrawingOptions:   @local::argoneut_disp_service
}

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "cosmics_hist.root" closeFileFast: false }
  Timing:       {}
  RandomNumberGenerator: {} #ART native random number generator
  message:      @local::evd_message
  user:         @local::t962services
}

#Look at the input files
source:
{
  module_type: RootInput
  fileNames:  [ "data.root" ]
  maxEvents:   -1       # Number of events to create
  inputCommands:["keep *","drop sim::PMTHits_*_*_*"]
}

outputs:{}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers: {}

 filters:{}

 analyzers:
 {
  evdisp:{module_type: ArgoneutEVD}
 }
 
 #list the modules for this path, order matters, filters reject all following items
 evd: [ evdisp ] 

 #end_path are things that do not modify art::Event, includes analyzers 
 #and output modules. all items here can be run simultaneously
 end_paths: [evd]  
}
