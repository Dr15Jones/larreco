#include "job/services.fcl"
// #include "job/anamodule.fcl"
#include "job/vertexfindermodules.fcl"
#include "job/analysistreemodule.fcl"

process_name: Ana

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "anatree.root" }
  scheduler:    { wantTracer: true wantSummary: true }
  message:      {}
  Timing:       {}
  RandomNumberGenerator: {} #ART native random number generator
  user: { }
}

services.message: @local::standard_warning

# services from LArSoft - see definitions for configurations in 
# job/geometry.fcl
# job/services.fcl
services.user.Geometry:           @local::argoneut_geo 
services.user.LArProperties:      @local::argoneut_properties

#source is now a root file
source:
{
  module_type: RootInput
  maxEvents:  -1       # Number of events to create
}

outputs:{}
#{
# out1:
# {
#   module_type: RootOutput
#   fileName:    "hist.root" #default file name, can override from command line with -o or --output
# }
#}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:{
   vertex2d:     @local::argoneut_vertex2d
}

# filters:{}

 analyzers:{}

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 reco: [ vertex2d ] 
 ana:  [ analysistree ]

 #define the output stream, there could be more than one if using filters 
 #stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [reco] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [ana]  
}

#define the list of analyzers to run
physics.analyzers.analysistree: @local::argoneut_analysistree
